{"ast":null,"code":"var _jsxFileName = \"/home/abdisalam/Projects/Web/Incident/ClientApp/src/components/Form/UploadFileField.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useFormikContext } from \"formik\";\nimport { FormGroup, FormLabel } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextFileField = ({\n  name,\n  file,\n  setFile,\n  label,\n  required,\n  ...otherProps\n}) => {\n  _s();\n\n  const {\n    setFieldTouched,\n    touched,\n    errors,\n    values,\n    setFieldError\n  } = useFormikContext();\n\n  const handleUploadFile = async e => {\n    const file = e.target.files[0];\n\n    if (file.name && file.name.substring(file.name.length - 3) === \"png\" || file.name && file.name.substring(file.name.length - 3) === \"jpg\") {\n      const arrayBuffer = await file.arrayBuffer();\n      const int8Array = new Uint8Array(arrayBuffer);\n      setFile(int8Array.toString());\n    } else {\n      setFieldError(name, \"Image type must be Jpg/Png\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormGroup, {\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      children: [label, \" \", required && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-danger\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-control\",\n      ...otherProps,\n      onChange: e => handleUploadFile(e),\n      onBlur: () => setFieldTouched(name),\n      value: values[name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), errors[name] && touched[name] ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger\",\n      children: errors[name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TextFileField, \"blqTI8c+Ql+vAB08f1AnzY3V1IQ=\", false, function () {\n  return [useFormikContext];\n});\n\n_c = TextFileField;\nexport default TextFileField;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextFileField\");","map":{"version":3,"sources":["/home/abdisalam/Projects/Web/Incident/ClientApp/src/components/Form/UploadFileField.js"],"names":["React","useFormikContext","FormGroup","FormLabel","TextFileField","name","file","setFile","label","required","otherProps","setFieldTouched","touched","errors","values","setFieldError","handleUploadFile","e","target","files","substring","length","arrayBuffer","int8Array","Uint8Array","toString"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,QAAjC;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,iBAArC;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AACrBC,EAAAA,IADqB;AAErBC,EAAAA,IAFqB;AAGrBC,EAAAA,OAHqB;AAIrBC,EAAAA,KAJqB;AAKrBC,EAAAA,QALqB;AAMrB,KAAGC;AANkB,CAAD,KAOhB;AAAA;;AACJ,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA,MAA5B;AAAoCC,IAAAA,MAApC;AAA4CC,IAAAA;AAA5C,MACJd,gBAAgB,EADlB;;AAEA,QAAMe,gBAAgB,GAAG,MAAOC,CAAP,IAAa;AACpC,UAAMX,IAAI,GAAGW,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;;AAEA,QACGb,IAAI,CAACD,IAAL,IAAaC,IAAI,CAACD,IAAL,CAAUe,SAAV,CAAoBd,IAAI,CAACD,IAAL,CAAUgB,MAAV,GAAmB,CAAvC,MAA8C,KAA5D,IACCf,IAAI,CAACD,IAAL,IAAaC,IAAI,CAACD,IAAL,CAAUe,SAAV,CAAoBd,IAAI,CAACD,IAAL,CAAUgB,MAAV,GAAmB,CAAvC,MAA8C,KAF9D,EAGE;AACA,YAAMC,WAAW,GAAG,MAAMhB,IAAI,CAACgB,WAAL,EAA1B;AACA,YAAMC,SAAS,GAAG,IAAIC,UAAJ,CAAeF,WAAf,CAAlB;AACAf,MAAAA,OAAO,CAACgB,SAAS,CAACE,QAAV,EAAD,CAAP;AACD,KAPD,MAOO;AACLV,MAAAA,aAAa,CAACV,IAAD,EAAO,4BAAP,CAAb;AACD;AACF,GAbD;;AAeA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,SAAD;AAAA,iBACGG,KADH,OACWC,QAAQ,iBAAI;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACE,MAAA,SAAS,EAAC,cADZ;AAAA,SAEMC,UAFN;AAGE,MAAA,QAAQ,EAAGO,CAAD,IAAOD,gBAAgB,CAACC,CAAD,CAHnC;AAIE,MAAA,MAAM,EAAE,MAAMN,eAAe,CAACN,IAAD,CAJ/B;AAKE,MAAA,KAAK,EAAES,MAAM,CAACT,IAAD;AALf;AAAA;AAAA;AAAA;AAAA,YAJF,EAWGQ,MAAM,CAACR,IAAD,CAAN,IAAgBO,OAAO,CAACP,IAAD,CAAvB,gBACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBAA8BQ,MAAM,CAACR,IAAD;AAApC;AAAA;AAAA;AAAA;AAAA,YADD,GAEG,IAbN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA1CD;;GAAMD,a;UASFH,gB;;;KATEG,a;AA4CN,eAAeA,aAAf","sourcesContent":["import React from \"react\";\nimport { useFormikContext } from \"formik\";\n\nimport { FormGroup, FormLabel } from \"react-bootstrap\";\n\nconst TextFileField = ({\n  name,\n  file,\n  setFile,\n  label,\n  required,\n  ...otherProps\n}) => {\n  const { setFieldTouched, touched, errors, values, setFieldError } =\n    useFormikContext();\n  const handleUploadFile = async (e) => {\n    const file = e.target.files[0];\n\n    if (\n      (file.name && file.name.substring(file.name.length - 3) === \"png\") ||\n      (file.name && file.name.substring(file.name.length - 3) === \"jpg\")\n    ) {\n      const arrayBuffer = await file.arrayBuffer();\n      const int8Array = new Uint8Array(arrayBuffer);\n      setFile(int8Array.toString());\n    } else {\n      setFieldError(name, \"Image type must be Jpg/Png\");\n    }\n  };\n\n  return (\n    <FormGroup>\n      <FormLabel>\n        {label} {required && <span className=\"text-danger\">*</span>}\n      </FormLabel>\n      <input\n        className=\"form-control\"\n        {...otherProps}\n        onChange={(e) => handleUploadFile(e)}\n        onBlur={() => setFieldTouched(name)}\n        value={values[name]}\n      />\n      {errors[name] && touched[name] ? (\n        <div className=\"text-danger\">{errors[name]}</div>\n      ) : null}\n    </FormGroup>\n  );\n};\n\nexport default TextFileField;\n"]},"metadata":{},"sourceType":"module"}