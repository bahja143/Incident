{"ast":null,"code":"var _jsxFileName = \"/home/abdisalam/Documents/Incident/ClientApp/src/views/Checklist/ChecklistForm.jsx\";\nimport React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport { SelectField, SubmitBtn, TextField, DateField } from \"../../components/Form\";\nimport Config from \"../../config/config.json\";\nimport Services from \"../../services/HttpServices\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ChecklistForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chechlist: {\n        id: 0,\n        customerId: \"\",\n        roomId: \"\",\n        amount: \"\",\n        startDate: \"\"\n      },\n      customers: [],\n      rooms: [],\n      equibments: [{\n        value: 1,\n        label: \"FORKLIFT\"\n      }, {\n        value: 2,\n        label: \"ITV\"\n      }, {\n        value: 3,\n        label: \"MHC\"\n      }, {\n        value: 4,\n        label: \"MC\"\n      }, {\n        value: 5,\n        label: \"RTG\"\n      }, {\n        value: 6,\n        label: \"ECH\"\n      }, {\n        value: 7,\n        label: \"RS\"\n      }]\n    };\n    this.schema = Yup.object({\n      id: Yup.number().label(\"Id\"),\n      customerId: Yup.number().required().label(\"Customer\"),\n      roomId: Yup.number().required().label(\"Room\"),\n      amount: Yup.number().required().min(0).max(10000).label(\"Amount\"),\n      startDate: Yup.date().required().label(\"Start Date\")\n    });\n\n    this.handleSubmit = () => {\n      const {\n        chechlist,\n        file\n      } = this.state;\n      const auth = {\n        Authorization: `bearer ${localStorage[\"token\"]}`\n      };\n      const data = { ...chechlist,\n        document: file\n      };\n      this.setState({\n        chechlist: {\n          id: 0,\n          customerId: \"\",\n          roomId: \"\",\n          amount: \"\",\n          startDate: chechlist.startDate\n        },\n        file: \"\"\n      });\n\n      if (chechlist.id === 0) {\n        Services.post(Config.apiUrl + \"/rentals\", data, {\n          headers: auth\n        }).then(() => {\n          toast.success(\"Successful Registred.\");\n        }).catch(error => {\n          console.log(error);\n\n          if (error.response && error.response.data) {\n            toast.error(error.response.data);\n          } else {\n            toast.error(\"Something went wrong\");\n          }\n        });\n      } else {\n        Services.put(Config.apiUrl + \"/rentals/\" + data.id, data, {\n          headers: auth\n        }).then(() => {\n          toast.info(\"Successful Updates.\");\n        }).catch(error => {\n          console.log(error);\n\n          if (error.response && error.response.data) {\n            toast.error(error.response.data);\n          } else {\n            toast.error(\"Something went wrong\");\n          }\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      chechlist,\n      rooms,\n      equibments\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          children: /*#__PURE__*/_jsxDEV(Card.Title, {\n            children: chechlist.id === 0 ? \"New checklist\" : \"Update checklist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: chechlist,\n          enableReinitialize: true,\n          validationSchema: this.schema,\n          onSubmit: (chechlist, {\n            resetForm\n          }) => {\n            resetForm();\n            this.setState({\n              chechlist\n            });\n            this.handleSubmit(chechlist);\n          },\n          children: () => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(SelectField, {\n                    name: \"customerId\",\n                    label: \"Equibment\",\n                    options: equibments,\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 65,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(SelectField, {\n                    name: \"roomId\",\n                    label: \"Room\",\n                    options: rooms.map(c => ({\n                      label: c.roomNumber,\n                      value: c.id\n                    })),\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(TextField, {\n                    name: \"amount\",\n                    label: \"Amount\",\n                    required: true,\n                    type: \"number\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(DateField, {\n                    name: \"startDate\",\n                    label: \"start Date\",\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(SubmitBtn, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n  componentDidMount() {\n    const auth = {\n      Authorization: `bearer ${localStorage[\"token\"]}`\n    };\n    const {\n      id\n    } = this.props.match.params;\n\n    if (id) {\n      Services.get(Config.apiUrl + \"/rentals/\" + id, {\n        headers: auth\n      }).then(({\n        data\n      }) => {\n        delete data.endDate;\n        delete data.isCurrent;\n        delete data.customer;\n        delete data.room;\n        this.setState({\n          file: data.document\n        });\n        delete data.document;\n        this.setState({\n          chechlist: data\n        });\n      }).catch(error => {\n        console.log(error);\n        toast.error(\"Something went wrong\");\n      });\n    }\n\n    Services.get(Config.apiUrl + \"/customers\", {\n      headers: auth\n    }).then(({\n      data\n    }) => {\n      this.setState({\n        customers: data\n      });\n    }).catch(error => {\n      console.log(error);\n      toast.error(\"Something went wrong\");\n    });\n    Services.get(Config.apiUrl + \"/rooms\", {\n      headers: auth\n    }).then(({\n      data\n    }) => {\n      this.setState({\n        rooms: data\n      });\n    }).catch(error => {\n      console.log(error);\n      toast.error(\"Something went wrong\");\n    });\n  }\n\n}\n\nexport default ChecklistForm;","map":{"version":3,"sources":["/home/abdisalam/Documents/Incident/ClientApp/src/views/Checklist/ChecklistForm.jsx"],"names":["React","Component","Formik","Yup","Card","Row","Col","SelectField","SubmitBtn","TextField","DateField","Config","Services","toast","ChecklistForm","state","chechlist","id","customerId","roomId","amount","startDate","customers","rooms","equibments","value","label","schema","object","number","required","min","max","date","handleSubmit","file","auth","Authorization","localStorage","data","document","setState","post","apiUrl","headers","then","success","catch","error","console","log","response","put","info","render","resetForm","map","c","roomNumber","componentDidMount","props","match","params","get","endDate","isCurrent","customer","room"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport {\n    SelectField,\n    SubmitBtn,\n    TextField,\n    DateField,\n} from \"../../components/Form\";\nimport Config from \"../../config/config.json\";\nimport Services from \"../../services/HttpServices\";\nimport { toast } from \"react-toastify\";\n\nclass ChecklistForm extends Component {\n    state = {\n        chechlist: {\n            id: 0,\n            customerId: \"\",\n            roomId: \"\",\n            amount: \"\",\n            startDate: \"\",\n        },\n        customers: [],\n        rooms: [],\n        equibments: [{ value: 1, label: \"FORKLIFT\" }, { value: 2, label: \"ITV\" }, { value: 3, label: \"MHC\" }, { value: 4, label: \"MC\" }, { value: 5, label: \"RTG\" }, { value: 6, label:\"ECH\" }, {value:7, label:\"RS\"}]\n    };\n\n    schema = Yup.object({\n        id: Yup.number().label(\"Id\"),\n        customerId: Yup.number().required().label(\"Customer\"),\n        roomId: Yup.number().required().label(\"Room\"),\n        amount: Yup.number().required().min(0).max(10000).label(\"Amount\"),\n        startDate: Yup.date().required().label(\"Start Date\"),\n    });\n\n    render() {\n        const { chechlist, rooms, equibments } = this.state;\n\n\n        return (\n            <>\n                <Card>\n                    <Card.Header>\n                        <Card.Title>\n                            {chechlist.id === 0 ? \"New checklist\" : \"Update checklist\"}\n                        </Card.Title>\n                    </Card.Header>\n                    <Formik\n                        initialValues={chechlist}\n                        enableReinitialize={true}\n                        validationSchema={this.schema}\n                        onSubmit={(chechlist, { resetForm }) => {\n                            resetForm();\n                            this.setState({ chechlist });\n                            this.handleSubmit(chechlist);\n                        }}\n                    >\n                        {() => (\n                            <>\n                                <Card.Body>\n                                    <Row>\n                                        <Col>\n                                            <SelectField\n                                                name=\"customerId\"\n                                                label=\"Equibment\"\n                                                options={equibments}\n                                                required\n                                            />\n                                        </Col>\n                                        <Col>\n                                            <SelectField\n                                                name=\"roomId\"\n                                                label=\"Room\"\n                                                options={rooms.map((c) => ({\n                                                    label: c.roomNumber,\n                                                    value: c.id,\n                                                }))}\n                                                required\n                                            />\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Col>\n                                            <TextField\n                                                name=\"amount\"\n                                                label=\"Amount\"\n                                                required\n                                                type=\"number\"\n                                            />\n                                        </Col>\n                                        <Col>\n                                            <DateField name=\"startDate\" label=\"start Date\" required />\n                                        </Col>\n                                    </Row>\n                                </Card.Body>\n                                <Card.Footer className=\"text-center\">\n                                    <SubmitBtn />\n                                </Card.Footer>\n                            </>\n                        )}\n                    </Formik>\n                </Card>\n            </>\n        );\n    }\n\n    componentDidMount() {\n        const auth = { Authorization: `bearer ${localStorage[\"token\"]}` };\n        const { id } = this.props.match.params;\n\n        if (id) {\n            Services.get(Config.apiUrl + \"/rentals/\" + id, { headers: auth })\n                .then(({ data }) => {\n                    delete data.endDate;\n                    delete data.isCurrent;\n                    delete data.customer;\n                    delete data.room;\n\n                    this.setState({ file: data.document });\n                    delete data.document;\n                    this.setState({ chechlist: data });\n                })\n                .catch((error) => {\n                    console.log(error);\n\n                    toast.error(\"Something went wrong\");\n                });\n        }\n\n        Services.get(Config.apiUrl + \"/customers\", { headers: auth })\n            .then(({ data }) => {\n                this.setState({ customers: data });\n            })\n            .catch((error) => {\n                console.log(error);\n\n                toast.error(\"Something went wrong\");\n            });\n\n        Services.get(Config.apiUrl + \"/rooms\", { headers: auth })\n            .then(({ data }) => {\n                this.setState({ rooms: data });\n            })\n            .catch((error) => {\n                console.log(error);\n\n                toast.error(\"Something went wrong\");\n            });\n    }\n    handleSubmit = () => {\n        const { chechlist, file } = this.state;\n        const auth = { Authorization: `bearer ${localStorage[\"token\"]}` };\n        const data = { ...chechlist, document: file };\n\n        this.setState({\n            chechlist: {\n                id: 0,\n                customerId: \"\",\n                roomId: \"\",\n                amount: \"\",\n                startDate: chechlist.startDate,\n            },\n            file: \"\",\n        });\n\n        if (chechlist.id === 0) {\n            Services.post(Config.apiUrl + \"/rentals\", data, { headers: auth })\n                .then(() => {\n                    toast.success(\"Successful Registred.\");\n                })\n                .catch((error) => {\n                    console.log(error);\n\n                    if (error.response && error.response.data) {\n                        toast.error(error.response.data);\n                    } else {\n                        toast.error(\"Something went wrong\");\n                    }\n                });\n        } else {\n            Services.put(Config.apiUrl + \"/rentals/\" + data.id, data, {\n                headers: auth,\n            })\n                .then(() => {\n                    toast.info(\"Successful Updates.\");\n                })\n                .catch((error) => {\n                    console.log(error);\n\n                    if (error.response && error.response.data) {\n                        toast.error(error.response.data);\n                    } else {\n                        toast.error(\"Something went wrong\");\n                    }\n                });\n        }\n    };\n}\n\nexport default ChecklistForm;\n"]},"metadata":{},"sourceType":"module"}