{"ast":null,"code":"var _jsxFileName = \"/home/abdisalam/Downloads/BMSytem/ClientApp/src/views/Message/MessageForm.jsx\";\nimport React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport { SubmitBtn, TextAreaField, MultiSelectField, DateField } from \"../../components/Form\";\nimport Config from \"../../config/config.json\";\nimport Services from \"../../services/HttpServices\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass MessageForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: {\n        id: 0,\n        rentalId: \"\",\n        tellphone: \"\",\n        date: new Date(),\n        message: \"\"\n      },\n      rentals: []\n    };\n    this.schema = Yup.object({\n      id: Yup.number().label(\"Id\"),\n      rentalId: Yup.array().label(\"Customer\"),\n      tellphone: Yup.string(),\n      date: Yup.date().required().label(\"Date\"),\n      message: Yup.string().min(5).required().label(\"Message\")\n    });\n\n    this.handleSubmit = () => {\n      const auth = {\n        Authorization: `bearer ${localStorage[\"token\"]}`\n      };\n      const {\n        message,\n        rentals\n      } = this.state;\n      message.tellphones = message.rentalId.map(m => {\n        var _rentals$find;\n\n        return (_rentals$find = rentals.find(r => r.id === m.value)) === null || _rentals$find === void 0 ? void 0 : _rentals$find.customer.tellphone;\n      });\n      this.setState({\n        message: {\n          id: 0,\n          rentalId: message.rentalId,\n          date: new Date(),\n          message: \"\"\n        }\n      });\n      Services.post(\"https://gtsomapi.com/integration/api/Sms/SendByGroup\", {\n        body: message.message,\n        phones: message.tellphones,\n        security: {\n          username: \"Agbc\",\n          password: \"$Gobanimo2021\"\n        }\n      }).then(() => {\n        toast.success(\"Message sent\");\n        const customerIds = message.rentalId.map(r => rentals.find(re => re.id === r.value).customer.id);\n        customerIds.forEach(id => {\n          Services.post(Config.apiUrl + \"/messages\", {\n            customerId: id,\n            body: message.message,\n            date: message.date\n          }, {\n            headers: auth\n          });\n        });\n      }).catch(error => {\n        console.log(error);\n\n        if (error.response && error.response.data) {\n          toast.error(error.response.data);\n        } else {\n          toast.error(\"Something went wrong\");\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      message,\n      rentals\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: /*#__PURE__*/_jsxDEV(Card.Title, {\n          children: \"New Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: message,\n        enableReinitialize: true,\n        validationSchema: this.schema,\n        onSubmit: (message, {\n          resetForm\n        }) => {\n          // resetForm();\n          this.setState({\n            message\n          });\n          this.handleSubmit();\n        },\n        children: () => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(MultiSelectField, {\n                  name: \"rentalId\",\n                  label: \"Rental\",\n                  options: rentals.map(c => ({\n                    label: c.customer.name + \" (\" + c.room.roomNumber + \")\",\n                    value: c.id\n                  })),\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: /*#__PURE__*/_jsxDEV(Col, {\n                    children: /*#__PURE__*/_jsxDEV(DateField, {\n                      name: \"date\",\n                      label: \"Date\",\n                      required: true,\n                      disabled: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 72,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                children: /*#__PURE__*/_jsxDEV(TextAreaField, {\n                  name: \"message\",\n                  label: \"Message\",\n                  rows: 10,\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(SubmitBtn, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentDidMount() {\n    const auth = {\n      Authorization: `bearer ${localStorage[\"token\"]}`\n    };\n    Services.get(Config.apiUrl + \"/rentals\", {\n      headers: auth\n    }).then(({\n      data\n    }) => {\n      this.setState({\n        rentals: data.filter(r => r.isCurrent)\n      });\n    }).catch(error => {\n      console.log(error);\n      toast.error(\"Something went wrong\");\n    });\n  }\n\n}\n\nexport default MessageForm;","map":{"version":3,"sources":["/home/abdisalam/Downloads/BMSytem/ClientApp/src/views/Message/MessageForm.jsx"],"names":["React","Component","Formik","Yup","Card","Row","Col","SubmitBtn","TextAreaField","MultiSelectField","DateField","Config","Services","toast","MessageForm","state","message","id","rentalId","tellphone","date","Date","rentals","schema","object","number","label","array","string","required","min","handleSubmit","auth","Authorization","localStorage","tellphones","map","m","find","r","value","customer","setState","post","body","phones","security","username","password","then","success","customerIds","re","forEach","apiUrl","customerId","headers","catch","error","console","log","response","data","render","resetForm","c","name","room","roomNumber","componentDidMount","get","filter","isCurrent"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport {\n  SubmitBtn,\n  TextAreaField,\n  MultiSelectField,\n  DateField,\n} from \"../../components/Form\";\nimport Config from \"../../config/config.json\";\nimport Services from \"../../services/HttpServices\";\nimport { toast } from \"react-toastify\";\n\nclass MessageForm extends Component {\n  state = {\n    message: {\n      id: 0,\n      rentalId: \"\",\n      tellphone: \"\",\n      date: new Date(),\n      message: \"\",\n    },\n    rentals: [],\n  };\n\n  schema = Yup.object({\n    id: Yup.number().label(\"Id\"),\n    rentalId: Yup.array().label(\"Customer\"),\n    tellphone: Yup.string(),\n    date: Yup.date().required().label(\"Date\"),\n    message: Yup.string().min(5).required().label(\"Message\"),\n  });\n\n  render() {\n    const { message, rentals } = this.state;\n\n    return (\n      <Card>\n        <Card.Header>\n          <Card.Title>New Message</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={message}\n          enableReinitialize={true}\n          validationSchema={this.schema}\n          onSubmit={(message, { resetForm }) => {\n            // resetForm();\n            this.setState({ message });\n            this.handleSubmit();\n          }}\n        >\n          {() => (\n            <>\n              <Card.Body>\n                <Row>\n                  <Col>\n                    <MultiSelectField\n                      name=\"rentalId\"\n                      label=\"Rental\"\n                      options={rentals.map((c) => ({\n                        label: c.customer.name + \" (\" + c.room.roomNumber + \")\",\n                        value: c.id,\n                      }))}\n                      required\n                    />\n                  </Col>\n                  <Col>\n                    <Row>\n                      <Col>\n                        <DateField name=\"date\" label=\"Date\" required disabled />\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col>\n                    <TextAreaField\n                      name=\"message\"\n                      label=\"Message\"\n                      rows={10}\n                      required\n                    />\n                  </Col>\n                </Row>\n              </Card.Body>\n              <Card.Footer className=\"text-center\">\n                <SubmitBtn />\n              </Card.Footer>\n            </>\n          )}\n        </Formik>\n      </Card>\n    );\n  }\n\n  componentDidMount() {\n    const auth = { Authorization: `bearer ${localStorage[\"token\"]}` };\n\n    Services.get(Config.apiUrl + \"/rentals\", { headers: auth })\n      .then(({ data }) => {\n        this.setState({ rentals: data.filter((r) => r.isCurrent) });\n      })\n      .catch((error) => {\n        console.log(error);\n\n        toast.error(\"Something went wrong\");\n      });\n  }\n  handleSubmit = () => {\n    const auth = { Authorization: `bearer ${localStorage[\"token\"]}` };\n    const { message, rentals } = this.state;\n    message.tellphones = message.rentalId.map(\n      (m) => rentals.find((r) => r.id === m.value)?.customer.tellphone\n    );\n\n    this.setState({\n      message: {\n        id: 0,\n        rentalId: message.rentalId,\n        date: new Date(),\n        message: \"\",\n      },\n    });\n\n    Services.post(\"https://gtsomapi.com/integration/api/Sms/SendByGroup\", {\n      body: message.message,\n      phones: message.tellphones,\n      security: {\n        username: \"Agbc\",\n        password: \"$Gobanimo2021\",\n      },\n    })\n      .then(() => {\n        toast.success(\"Message sent\");\n        const customerIds = message.rentalId.map(\n          (r) => rentals.find((re) => re.id === r.value).customer.id\n        );\n\n        customerIds.forEach((id) => {\n          Services.post(\n            Config.apiUrl + \"/messages\",\n            { customerId: id, body: message.message, date: message.date },\n            {\n              headers: auth,\n            }\n          );\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n\n        if (error.response && error.response.data) {\n          toast.error(error.response.data);\n        } else {\n          toast.error(\"Something went wrong\");\n        }\n      });\n  };\n}\n\nexport default MessageForm;\n"]},"metadata":{},"sourceType":"module"}